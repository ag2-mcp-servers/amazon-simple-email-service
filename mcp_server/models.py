# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:48:34+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, constr


class AccountSuspendedException(RootModel[Any]):
    root: Any


class AdditionalContactEmailAddress(RootModel[SecretStr]):
    root: SecretStr


class AdditionalContactEmailAddresses(RootModel[List[AdditionalContactEmailAddress]]):
    root: List[AdditionalContactEmailAddress] = Field(..., max_length=4, min_length=1)


class AlreadyExistsException(RootModel[Any]):
    root: Any


class AmazonResourceName(RootModel[str]):
    root: str


class AttributesData(RootModel[str]):
    root: str


class BadRequestException(RootModel[Any]):
    root: Any


class BehaviorOnMxFailure(Enum):
    USE_DEFAULT_VALUE = 'USE_DEFAULT_VALUE'
    REJECT_MESSAGE = 'REJECT_MESSAGE'


class BlacklistItemName(RootModel[str]):
    root: str = Field(
        ...,
        description='An IP address that you want to obtain blacklist information for.',
    )


class BlacklistItemNames(RootModel[List[BlacklistItemName]]):
    root: List[BlacklistItemName]


class BlacklistingDescription(RootModel[str]):
    root: str = Field(..., description='A description of the blacklisting event.')


class BulkEmailStatus(Enum):
    SUCCESS = 'SUCCESS'
    MESSAGE_REJECTED = 'MESSAGE_REJECTED'
    MAIL_FROM_DOMAIN_NOT_VERIFIED = 'MAIL_FROM_DOMAIN_NOT_VERIFIED'
    CONFIGURATION_SET_NOT_FOUND = 'CONFIGURATION_SET_NOT_FOUND'
    TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND'
    ACCOUNT_SUSPENDED = 'ACCOUNT_SUSPENDED'
    ACCOUNT_THROTTLED = 'ACCOUNT_THROTTLED'
    ACCOUNT_DAILY_QUOTA_EXCEEDED = 'ACCOUNT_DAILY_QUOTA_EXCEEDED'
    INVALID_SENDING_POOL_NAME = 'INVALID_SENDING_POOL_NAME'
    ACCOUNT_SENDING_PAUSED = 'ACCOUNT_SENDING_PAUSED'
    CONFIGURATION_SET_SENDING_PAUSED = 'CONFIGURATION_SET_SENDING_PAUSED'
    INVALID_PARAMETER = 'INVALID_PARAMETER'
    TRANSIENT_FAILURE = 'TRANSIENT_FAILURE'
    FAILED = 'FAILED'


class CampaignId(RootModel[str]):
    root: str


class CaseId(RootModel[str]):
    root: str


class Charset(RootModel[str]):
    root: str


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConfigurationSetName(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )


class ConfigurationSetNameList(RootModel[List[ConfigurationSetName]]):
    root: List[ConfigurationSetName]


class ConflictException(RootModel[Any]):
    root: Any


class ContactLanguage(Enum):
    EN = 'EN'
    JA = 'JA'


class ContactListImportAction(Enum):
    DELETE = 'DELETE'
    PUT = 'PUT'


class ContactListName(RootModel[str]):
    root: str


class Counter(RootModel[int]):
    root: int


class CreateConfigurationSetEventDestinationResponse(BaseModel):
    pass


class CreateConfigurationSetResponse(BaseModel):
    pass


class CreateContactListResponse(BaseModel):
    pass


class CreateContactResponse(BaseModel):
    pass


class CreateCustomVerificationEmailTemplateResponse(BaseModel):
    pass


class CreateDedicatedIpPoolResponse(BaseModel):
    pass


class CreateEmailIdentityPolicyResponse(BaseModel):
    pass


class CreateEmailTemplateResponse(BaseModel):
    pass


class CustomRedirectDomain(RootModel[str]):
    root: str = Field(
        ..., description='The domain to use for tracking open and click events.'
    )


class DataFormat(Enum):
    CSV = 'CSV'
    JSON = 'JSON'


class DefaultDimensionValue(RootModel[str]):
    root: str = Field(
        ...,
        description="<p>The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email. This value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>",
    )


class DeleteConfigurationSetEventDestinationRequest(BaseModel):
    pass


class DeleteConfigurationSetEventDestinationResponse(BaseModel):
    pass


class DeleteConfigurationSetRequest(BaseModel):
    pass


class DeleteConfigurationSetResponse(BaseModel):
    pass


class DeleteContactListRequest(BaseModel):
    pass


class DeleteContactListResponse(BaseModel):
    pass


class DeleteContactRequest(BaseModel):
    pass


class DeleteContactResponse(BaseModel):
    pass


class DeleteCustomVerificationEmailTemplateRequest(BaseModel):
    pass


class DeleteCustomVerificationEmailTemplateResponse(BaseModel):
    pass


class DeleteDedicatedIpPoolRequest(BaseModel):
    pass


class DeleteDedicatedIpPoolResponse(BaseModel):
    pass


class DeleteEmailIdentityPolicyRequest(BaseModel):
    pass


class DeleteEmailIdentityPolicyResponse(BaseModel):
    pass


class DeleteEmailIdentityRequest(BaseModel):
    pass


class DeleteEmailIdentityResponse(BaseModel):
    pass


class DeleteEmailTemplateRequest(BaseModel):
    pass


class DeleteEmailTemplateResponse(BaseModel):
    pass


class DeleteSuppressedDestinationRequest(BaseModel):
    pass


class DeleteSuppressedDestinationResponse(BaseModel):
    pass


class DeliverabilityDashboardAccountStatus(Enum):
    ACTIVE = 'ACTIVE'
    PENDING_EXPIRATION = 'PENDING_EXPIRATION'
    DISABLED = 'DISABLED'


class DeliverabilityTestStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'


class DeliverabilityTestSubject(RootModel[str]):
    root: str = Field(
        ...,
        description='The subject line for an email that you submitted in a predictive inbox placement test.',
    )


class Description(RootModel[str]):
    root: str


class DimensionName(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>',
    )


class DimensionValueSource(Enum):
    MESSAGE_TAG = 'MESSAGE_TAG'
    EMAIL_HEADER = 'EMAIL_HEADER'
    LINK_TAG = 'LINK_TAG'


class DisplayName(RootModel[str]):
    root: str


class DkimSigningAttributesOrigin(Enum):
    AWS_SES = 'AWS_SES'
    EXTERNAL = 'EXTERNAL'


class DkimSigningKeyLength(Enum):
    RSA_1024_BIT = 'RSA_1024_BIT'
    RSA_2048_BIT = 'RSA_2048_BIT'


class DkimStatus(Enum):
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'
    NOT_STARTED = 'NOT_STARTED'


class DnsToken(RootModel[str]):
    root: str


class DnsTokenList(RootModel[List[DnsToken]]):
    root: List[DnsToken]


class Domain(RootModel[str]):
    root: str


class EmailAddress(RootModel[str]):
    root: str


class EmailAddressList(RootModel[List[EmailAddress]]):
    root: List[EmailAddress]


class EmailTemplateData(RootModel[constr(max_length=262144)]):
    root: constr(max_length=262144) = Field(
        ...,
        description='An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.',
    )


class EmailTemplateHtml(RootModel[str]):
    root: str = Field(..., description='The HTML body of the email.')


class EmailTemplateName(RootModel[constr(min_length=1)]):
    root: constr(min_length=1) = Field(
        ...,
        description='The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.',
    )


class EmailTemplateSubject(RootModel[str]):
    root: str = Field(..., description='The subject line of the email.')


class EmailTemplateText(RootModel[str]):
    root: str = Field(
        ...,
        description='The email body that will be visible to recipients whose email clients do not display HTML.',
    )


class Enabled(RootModel[bool]):
    root: bool


class EnabledWrapper(RootModel[bool]):
    root: bool


class ErrorMessage(RootModel[str]):
    root: str


class Esp(RootModel[str]):
    root: str


class Esps(RootModel[List[Esp]]):
    root: List[Esp]


class EventDestinationName(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The name of an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>',
    )


class EventType(Enum):
    SEND = 'SEND'
    REJECT = 'REJECT'
    BOUNCE = 'BOUNCE'
    COMPLAINT = 'COMPLAINT'
    DELIVERY = 'DELIVERY'
    OPEN = 'OPEN'
    CLICK = 'CLICK'
    RENDERING_FAILURE = 'RENDERING_FAILURE'
    DELIVERY_DELAY = 'DELIVERY_DELAY'
    SUBSCRIPTION = 'SUBSCRIPTION'


class EventTypes(RootModel[List[EventType]]):
    root: List[EventType]


class FailedRecordsCount(RootModel[int]):
    root: int


class FailedRecordsS3Url(RootModel[str]):
    root: str


class FailureInfo(BaseModel):
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    FailedRecordsS3Url_1: Optional[FailedRecordsS3Url] = Field(
        None, alias='FailedRecordsS3Url'
    )


class FailureRedirectionURL(RootModel[str]):
    root: str = Field(
        ...,
        description='The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.',
    )


class FeatureStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class FeedbackId(RootModel[str]):
    root: str


class GeneralEnforcementStatus(RootModel[str]):
    root: str


class GetAccountRequest(BaseModel):
    pass


class GetBlacklistReportsRequest(BaseModel):
    pass


class GetConfigurationSetEventDestinationsRequest(BaseModel):
    pass


class GetConfigurationSetRequest(BaseModel):
    pass


class GetContactListRequest(BaseModel):
    pass


class GetContactRequest(BaseModel):
    pass


class GetCustomVerificationEmailTemplateRequest(BaseModel):
    pass


class GetDedicatedIpPoolRequest(BaseModel):
    pass


class GetDedicatedIpRequest(BaseModel):
    pass


class GetDedicatedIpsRequest(BaseModel):
    pass


class GetDeliverabilityDashboardOptionsRequest(BaseModel):
    pass


class GetDeliverabilityTestReportRequest(BaseModel):
    pass


class GetDomainDeliverabilityCampaignRequest(BaseModel):
    pass


class GetDomainStatisticsReportRequest(BaseModel):
    pass


class GetEmailIdentityPoliciesRequest(BaseModel):
    pass


class GetEmailIdentityRequest(BaseModel):
    pass


class GetEmailTemplateRequest(BaseModel):
    pass


class GetImportJobRequest(BaseModel):
    pass


class GetSuppressedDestinationRequest(BaseModel):
    pass


class GuardianAttributes(BaseModel):
    OptimizedSharedDelivery: Optional[FeatureStatus] = None


class GuardianOptions(BaseModel):
    OptimizedSharedDelivery: Optional[FeatureStatus] = None


class Identity(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class IdentityType(Enum):
    EMAIL_ADDRESS = 'EMAIL_ADDRESS'
    DOMAIN = 'DOMAIN'
    MANAGED_DOMAIN = 'MANAGED_DOMAIN'


class ImageUrl(RootModel[str]):
    root: str


class ImportDestinationType(Enum):
    SUPPRESSION_LIST = 'SUPPRESSION_LIST'
    CONTACT_LIST = 'CONTACT_LIST'


class InternalServiceErrorException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class Ip(RootModel[str]):
    root: str = Field(..., description='An IPv4 address.')


class IpList(RootModel[List[Ip]]):
    root: List[Ip]


class IspName(RootModel[str]):
    root: str = Field(..., description='The name of an email provider.')


class IspNameList(RootModel[List[IspName]]):
    root: List[IspName]


class JobId(RootModel[constr(min_length=1)]):
    root: constr(min_length=1) = Field(
        ..., description='A string that represents the import job ID.'
    )


class JobStatus(Enum):
    CREATED = 'CREATED'
    PROCESSING = 'PROCESSING'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class KinesisFirehoseDestination(BaseModel):
    DeliveryStreamArn: AmazonResourceName
    IamRoleArn: AmazonResourceName


class LastFreshStart(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.',
    )


class LimitExceededException(RootModel[Any]):
    root: Any


class ListConfigurationSetsRequest(BaseModel):
    pass


class ListContactListsRequest(BaseModel):
    pass


class ListCustomVerificationEmailTemplatesRequest(BaseModel):
    pass


class ListDedicatedIpPoolsRequest(BaseModel):
    pass


class ListDeliverabilityTestReportsRequest(BaseModel):
    pass


class ListDomainDeliverabilityCampaignsRequest(BaseModel):
    pass


class ListEmailIdentitiesRequest(BaseModel):
    pass


class ListEmailTemplatesRequest(BaseModel):
    pass


class ListImportJobsRequest(BaseModel):
    ImportDestinationType_1: Optional[ImportDestinationType] = Field(
        None, alias='ImportDestinationType'
    )


class ListRecommendationFilterValue(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ListRecommendationsFilter(
    RootModel[Optional[Dict[str, ListRecommendationFilterValue]]]
):
    root: Optional[Dict[str, ListRecommendationFilterValue]] = None


class ListRecommendationsFilterKey(Enum):
    TYPE = 'TYPE'
    IMPACT = 'IMPACT'
    STATUS = 'STATUS'
    RESOURCE_ARN = 'RESOURCE_ARN'


class ListSuppressedDestinationsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MailFromDomainName(RootModel[str]):
    root: str = Field(..., description='The domain to use as a MAIL FROM domain.')


class MailFromDomainNotVerifiedException(RootModel[Any]):
    root: Any


class MailFromDomainStatus(Enum):
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'


class MailType(Enum):
    MARKETING = 'MARKETING'
    TRANSACTIONAL = 'TRANSACTIONAL'


class Max24HourSend(RootModel[float]):
    root: float


class MaxItems(RootModel[int]):
    root: int


class MaxSendRate(RootModel[float]):
    root: float


class MessageContent(RootModel[str]):
    root: str = Field(..., description='The body of an email message.')


class MessageData(RootModel[str]):
    root: str


class MessageRejected(RootModel[Any]):
    root: Any


class MessageTagName(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The name of the message tag. The message tag name has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>',
    )


class MessageTagValue(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The value of the message tag. The message tag value has to meet the following criteria:</p> <ul> <li> <p>It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (_), or dashes (-).</p> </li> <li> <p>It can contain no more than 256 characters.</p> </li> </ul>',
    )


class Metric(Enum):
    SEND = 'SEND'
    COMPLAINT = 'COMPLAINT'
    PERMANENT_BOUNCE = 'PERMANENT_BOUNCE'
    TRANSIENT_BOUNCE = 'TRANSIENT_BOUNCE'
    OPEN = 'OPEN'
    CLICK = 'CLICK'
    DELIVERY = 'DELIVERY'
    DELIVERY_OPEN = 'DELIVERY_OPEN'
    DELIVERY_CLICK = 'DELIVERY_CLICK'
    DELIVERY_COMPLAINT = 'DELIVERY_COMPLAINT'


class MetricDimensionName(Enum):
    EMAIL_IDENTITY = 'EMAIL_IDENTITY'
    CONFIGURATION_SET = 'CONFIGURATION_SET'
    ISP = 'ISP'


class MetricDimensionValue(RootModel[str]):
    root: str


class MetricNamespace(Enum):
    VDM = 'VDM'


class MetricValueList(RootModel[List[Counter]]):
    root: List[Counter]


class NextToken(RootModel[str]):
    root: str


class NotFoundException(RootModel[Any]):
    root: Any


class OutboundMessageId(RootModel[str]):
    root: str


class Percentage(RootModel[float]):
    root: float = Field(
        ...,
        description='An object that contains information about inbox placement percentages.',
    )


class Percentage100Wrapper(RootModel[int]):
    root: int


class PinpointDestination(BaseModel):
    ApplicationArn: Optional[AmazonResourceName] = None


class PlacementStatistics(BaseModel):
    DkimPercentage: Optional[Percentage] = None
    InboxPercentage: Optional[Percentage] = None
    MissingPercentage: Optional[Percentage] = None
    SpamPercentage: Optional[Percentage] = None
    SpfPercentage: Optional[Percentage] = None


class Policy(RootModel[constr(min_length=1)]):
    root: constr(min_length=1) = Field(
        ...,
        description='<p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>',
    )


class PolicyMap(RootModel[Optional[Dict[str, Policy]]]):
    root: Optional[Dict[str, Policy]] = None


class PolicyName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64) = Field(
        ...,
        description='<p>The name of the policy.</p> <p>The policy name cannot exceed 64 characters and can only include alphanumeric characters, dashes, and underscores.</p>',
    )


class PoolName(RootModel[str]):
    root: str = Field(..., description='The name of a dedicated IP pool.')


class PrivateKey(RootModel[SecretStr]):
    root: SecretStr


class ProcessedRecordsCount(RootModel[int]):
    root: int


class PutAccountDedicatedIpWarmupAttributesRequest(BaseModel):
    AutoWarmupEnabled: Optional[Enabled] = None


class PutAccountDedicatedIpWarmupAttributesResponse(BaseModel):
    pass


class PutAccountDetailsResponse(BaseModel):
    pass


class PutAccountSendingAttributesRequest(BaseModel):
    SendingEnabled: Optional[Enabled] = None


class PutAccountSendingAttributesResponse(BaseModel):
    pass


class PutAccountSuppressionAttributesResponse(BaseModel):
    pass


class PutAccountVdmAttributesResponse(BaseModel):
    pass


class PutConfigurationSetDeliveryOptionsResponse(BaseModel):
    pass


class PutConfigurationSetReputationOptionsRequest(BaseModel):
    ReputationMetricsEnabled: Optional[Enabled] = None


class PutConfigurationSetReputationOptionsResponse(BaseModel):
    pass


class PutConfigurationSetSendingOptionsRequest(BaseModel):
    SendingEnabled: Optional[Enabled] = None


class PutConfigurationSetSendingOptionsResponse(BaseModel):
    pass


class PutConfigurationSetSuppressionOptionsResponse(BaseModel):
    pass


class PutConfigurationSetTrackingOptionsRequest(BaseModel):
    CustomRedirectDomain_1: Optional[CustomRedirectDomain] = Field(
        None, alias='CustomRedirectDomain'
    )


class PutConfigurationSetTrackingOptionsResponse(BaseModel):
    pass


class PutConfigurationSetVdmOptionsResponse(BaseModel):
    pass


class PutDedicatedIpInPoolRequest(BaseModel):
    DestinationPoolName: PoolName


class PutDedicatedIpInPoolResponse(BaseModel):
    pass


class PutDedicatedIpWarmupAttributesRequest(BaseModel):
    WarmupPercentage: Percentage100Wrapper


class PutDedicatedIpWarmupAttributesResponse(BaseModel):
    pass


class PutDeliverabilityDashboardOptionResponse(BaseModel):
    pass


class PutEmailIdentityConfigurationSetAttributesRequest(BaseModel):
    ConfigurationSetName_1: Optional[ConfigurationSetName] = Field(
        None, alias='ConfigurationSetName'
    )


class PutEmailIdentityConfigurationSetAttributesResponse(BaseModel):
    pass


class PutEmailIdentityDkimAttributesRequest(BaseModel):
    SigningEnabled: Optional[Enabled] = None


class PutEmailIdentityDkimAttributesResponse(BaseModel):
    pass


class PutEmailIdentityDkimSigningAttributesResponse(BaseModel):
    DkimStatus_1: Optional[DkimStatus] = Field(None, alias='DkimStatus')
    DkimTokens: Optional[DnsTokenList] = None


class PutEmailIdentityFeedbackAttributesRequest(BaseModel):
    EmailForwardingEnabled: Optional[Enabled] = None


class PutEmailIdentityFeedbackAttributesResponse(BaseModel):
    pass


class PutEmailIdentityMailFromAttributesRequest(BaseModel):
    BehaviorOnMxFailure_1: Optional[BehaviorOnMxFailure] = Field(
        None, alias='BehaviorOnMxFailure'
    )
    MailFromDomain: Optional[MailFromDomainName] = None


class PutEmailIdentityMailFromAttributesResponse(BaseModel):
    pass


class PutSuppressedDestinationResponse(BaseModel):
    pass


class QueryErrorCode(Enum):
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'
    ACCESS_DENIED = 'ACCESS_DENIED'


class QueryErrorMessage(RootModel[str]):
    root: str


class QueryIdentifier(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class RawMessageData(RootModel[str]):
    root: str = Field(
        ...,
        description='<p>The raw email message. The message has to meet the following criteria:</p> <ul> <li> <p>The message has to contain a header and a body, separated by one blank line.</p> </li> <li> <p>All of the required header fields must be present in the message.</p> </li> <li> <p>Each part of a multipart MIME message must be formatted properly.</p> </li> <li> <p>Attachments must be in a file format that the Amazon SES API v2 supports. </p> </li> <li> <p>The entire message must be Base64 encoded.</p> </li> <li> <p>If any of the MIME parts in your message contain content that is outside of the 7-bit ASCII character range, you should encode that content to ensure that recipients\' email clients render the message properly.</p> </li> <li> <p>The length of any single line of text in the message can\'t exceed 1,000 characters. This restriction is defined in <a href="https://tools.ietf.org/html/rfc5321">RFC 5321</a>.</p> </li> </ul>',
    )


class RblName(RootModel[str]):
    root: str = Field(
        ..., description='The name of a blacklist that an IP address was found on.'
    )


class RecommendationDescription(RootModel[str]):
    root: str


class RecommendationImpact(Enum):
    LOW = 'LOW'
    HIGH = 'HIGH'


class RecommendationStatus(Enum):
    OPEN = 'OPEN'
    FIXED = 'FIXED'


class RecommendationType(Enum):
    DKIM = 'DKIM'
    DMARC = 'DMARC'
    SPF = 'SPF'
    BIMI = 'BIMI'


class RenderedEmailTemplate(RootModel[str]):
    root: str = Field(
        ...,
        description='The complete MIME message rendered by applying the data in the TemplateData parameter to the template specified in the TemplateName parameter.',
    )


class ReplacementTemplate(BaseModel):
    ReplacementTemplateData: Optional[EmailTemplateData] = None


class ReportId(RootModel[str]):
    root: str = Field(
        ...,
        description='A unique string that identifies a Deliverability dashboard report.',
    )


class ReportName(RootModel[str]):
    root: str = Field(
        ...,
        description='A name that helps you identify a report generated by the Deliverability dashboard.',
    )


class ReputationOptions(BaseModel):
    LastFreshStart_1: Optional[LastFreshStart] = Field(None, alias='LastFreshStart')
    ReputationMetricsEnabled: Optional[Enabled] = None


class ReviewStatus(Enum):
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    GRANTED = 'GRANTED'
    DENIED = 'DENIED'


class S3Url(RootModel[constr(pattern=r'^s3:\/\/([^\/]+)\/(.*?([^\/]+)\/?)$')]):
    root: constr(pattern=r'^s3:\/\/([^\/]+)\/(.*?([^\/]+)\/?)$') = Field(
        ...,
        description='An Amazon S3 URL in the format s3://<i>&lt;bucket_name&gt;</i>/<i>&lt;object&gt;</i>.',
    )


class ScalingMode(Enum):
    STANDARD = 'STANDARD'
    MANAGED = 'MANAGED'


class Selector(
    RootModel[
        constr(
            pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]))$',
            min_length=1,
            max_length=63,
        )
    ]
):
    root: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]))$',
        min_length=1,
        max_length=63,
    )


class SendCustomVerificationEmailRequest(BaseModel):
    ConfigurationSetName_1: Optional[ConfigurationSetName] = Field(
        None, alias='ConfigurationSetName'
    )
    EmailAddress_1: EmailAddress = Field(..., alias='EmailAddress')
    TemplateName: EmailTemplateName


class SendCustomVerificationEmailResponse(BaseModel):
    MessageId: Optional[OutboundMessageId] = None


class SendEmailResponse(BaseModel):
    MessageId: Optional[OutboundMessageId] = None


class SendingOptions(BaseModel):
    SendingEnabled: Optional[Enabled] = None


class SendingPausedException(RootModel[Any]):
    root: Any


class SendingPoolName(RootModel[str]):
    root: str = Field(
        ...,
        description='The name of the dedicated IP pool to associate with the configuration set.',
    )


class SentLast24Hours(RootModel[float]):
    root: float


class SnsDestination(BaseModel):
    TopicArn: AmazonResourceName


class Subject(RootModel[str]):
    root: str


class SubscriptionStatus(Enum):
    OPT_IN = 'OPT_IN'
    OPT_OUT = 'OPT_OUT'


class SuccessRedirectionURL(RootModel[str]):
    root: str = Field(
        ...,
        description='The URL that the recipient of the verification email is sent to if his or her address is successfully verified.',
    )


class SuppressedDestinationAttributes(BaseModel):
    FeedbackId_1: Optional[FeedbackId] = Field(None, alias='FeedbackId')
    MessageId: Optional[OutboundMessageId] = None


class SuppressionListImportAction(Enum):
    DELETE = 'DELETE'
    PUT = 'PUT'


class SuppressionListReason(Enum):
    BOUNCE = 'BOUNCE'
    COMPLAINT = 'COMPLAINT'


class SuppressionListReasons(RootModel[List[SuppressionListReason]]):
    root: List[SuppressionListReason]


class SuppressionOptions(BaseModel):
    SuppressedReasons: Optional[SuppressionListReasons] = None


class TagKey(RootModel[str]):
    root: str


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[str]):
    root: str


class Template(BaseModel):
    TemplateArn: Optional[AmazonResourceName] = None
    TemplateData: Optional[EmailTemplateData] = None
    TemplateName: Optional[EmailTemplateName] = None


class TemplateContent(RootModel[str]):
    root: str = Field(
        ..., description='The content of the custom verification email template.'
    )


class TestRenderEmailTemplateRequest(BaseModel):
    TemplateData: EmailTemplateData


class TestRenderEmailTemplateResponse(BaseModel):
    RenderedTemplate: RenderedEmailTemplate


class Timestamp(RootModel[datetime]):
    root: datetime


class TimestampList(RootModel[List[Timestamp]]):
    root: List[Timestamp]


class TlsPolicy(Enum):
    REQUIRE = 'REQUIRE'
    OPTIONAL = 'OPTIONAL'


class TooManyRequestsException(RootModel[Any]):
    root: Any


class TopicName(RootModel[str]):
    root: str


class TopicPreference(BaseModel):
    SubscriptionStatus_1: SubscriptionStatus = Field(..., alias='SubscriptionStatus')
    TopicName_1: TopicName = Field(..., alias='TopicName')


class TopicPreferenceList(RootModel[List[TopicPreference]]):
    root: List[TopicPreference]


class TrackingOptions(BaseModel):
    CustomRedirectDomain_1: CustomRedirectDomain = Field(
        ..., alias='CustomRedirectDomain'
    )


class UnsubscribeAll(RootModel[bool]):
    root: bool


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateConfigurationSetEventDestinationResponse(BaseModel):
    pass


class UpdateContactListResponse(BaseModel):
    pass


class UpdateContactRequest(BaseModel):
    AttributesData_1: Optional[AttributesData] = Field(None, alias='AttributesData')
    TopicPreferences: Optional[TopicPreferenceList] = None
    UnsubscribeAll_1: Optional[UnsubscribeAll] = Field(None, alias='UnsubscribeAll')


class UpdateContactResponse(BaseModel):
    pass


class UpdateCustomVerificationEmailTemplateRequest(BaseModel):
    FailureRedirectionURL_1: FailureRedirectionURL = Field(
        ..., alias='FailureRedirectionURL'
    )
    FromEmailAddress: EmailAddress
    SuccessRedirectionURL_1: SuccessRedirectionURL = Field(
        ..., alias='SuccessRedirectionURL'
    )
    TemplateContent_1: TemplateContent = Field(..., alias='TemplateContent')
    TemplateSubject: EmailTemplateSubject


class UpdateCustomVerificationEmailTemplateResponse(BaseModel):
    pass


class UpdateEmailIdentityPolicyRequest(BaseModel):
    Policy_1: Policy = Field(..., alias='Policy')


class UpdateEmailIdentityPolicyResponse(BaseModel):
    pass


class UpdateEmailTemplateResponse(BaseModel):
    pass


class UseCaseDescription(RootModel[SecretStr]):
    root: SecretStr


class UseDefaultIfPreferenceUnavailable(RootModel[bool]):
    root: bool


class VerificationStatus(Enum):
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    TEMPORARY_FAILURE = 'TEMPORARY_FAILURE'
    NOT_STARTED = 'NOT_STARTED'


class Volume(RootModel[int]):
    root: int = Field(
        ...,
        description='An object that contains information about inbox placement volume.',
    )


class VolumeStatistics(BaseModel):
    InboxRawCount: Optional[Volume] = None
    ProjectedInbox: Optional[Volume] = None
    ProjectedSpam: Optional[Volume] = None
    SpamRawCount: Optional[Volume] = None


class WarmupStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    DONE = 'DONE'


class WebsiteURL(RootModel[SecretStr]):
    root: SecretStr


class SigningAttributes(BaseModel):
    DomainSigningPrivateKey: Optional[PrivateKey] = None
    DomainSigningSelector: Optional[Selector] = None
    NextSigningKeyLength: Optional[DkimSigningKeyLength] = None


class SigningAttributesOrigin(Enum):
    AWS_SES = 'AWS_SES'
    EXTERNAL = 'EXTERNAL'


class V1EmailIdentitiesEmailIdentityDkimSigningPutRequest(BaseModel):
    SigningAttributes_1: Optional[SigningAttributes] = Field(
        None,
        alias='SigningAttributes',
        description='An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM',
    )
    SigningAttributesOrigin_1: SigningAttributesOrigin = Field(
        ...,
        alias='SigningAttributesOrigin',
        description='<p>The method to use to configure DKIM for the identity. There are the following possible values:</p> <ul> <li> <p> <code>AWS_SES</code> – Configure DKIM for the identity by using <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Easy DKIM</a>.</p> </li> <li> <p> <code>EXTERNAL</code> – Configure DKIM for the identity by using Bring Your Own DKIM (BYODKIM).</p> </li> </ul>',
    )


class V2EmailAccountDedicatedIpsWarmupPutRequest(BaseModel):
    AutoWarmupEnabled: Optional[bool] = Field(
        None,
        description='Enables or disables the automatic warm-up feature for dedicated IP addresses that are associated with your Amazon SES account in the current Amazon Web Services Region. Set to <code>true</code> to enable the automatic warm-up feature, or set to <code>false</code> to disable it.',
    )


class V2EmailAccountDetailsPostRequest(BaseModel):
    AdditionalContactEmailAddresses: Optional[List[AdditionalContactEmailAddress]] = (
        Field(
            None,
            description='Additional email addresses that you would like to be notified regarding Amazon SES matters.',
            max_length=4,
            min_length=1,
        )
    )
    ContactLanguage_1: Optional[ContactLanguage] = Field(
        None,
        alias='ContactLanguage',
        description='The language you would prefer to be contacted with.',
    )
    MailType_1: MailType = Field(
        ..., alias='MailType', description='The type of email your account will send.'
    )
    ProductionAccessEnabled: Optional[bool] = Field(
        None,
        description='<p>Indicates whether or not your account should have production access in the current Amazon Web Services Region.</p> <p>If the value is <code>false</code>, then your account is in the <i>sandbox</i>. When your account is in the sandbox, you can only send email to verified identities. Additionally, the maximum number of emails you can send in a 24-hour period (your sending quota) is 200, and the maximum number of emails you can send per second (your maximum sending rate) is 1.</p> <p>If the value is <code>true</code>, then your account has production access. When your account has production access, you can send email to any address. The sending quota and maximum sending rate for your account vary based on your specific use case.</p>',
    )
    UseCaseDescription: SecretStr = Field(
        ..., description='A description of the types of email that you plan to send.'
    )
    WebsiteURL: SecretStr = Field(
        ...,
        description='The URL of your website. This information helps us better understand the type of content that you plan to send.',
    )


class V2EmailAccountSendingPutRequest(BaseModel):
    SendingEnabled: Optional[bool] = Field(
        None,
        description="<p>Enables or disables your account's ability to send email. Set to <code>true</code> to enable email sending, or set to <code>false</code> to disable email sending.</p> <note> <p>If Amazon Web Services paused your account's ability to send email, you can't use this operation to resume your account's ability to send email.</p> </note>",
    )


class V2EmailAccountSuppressionPutRequest(BaseModel):
    SuppressedReasons: Optional[List[SuppressionListReason]] = Field(
        None,
        description='<p>A list that contains the reasons that email addresses will be automatically added to the suppression list for your account. This list can contain any or all of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.</p> </li> </ul>',
    )


class DeliveryOptions(BaseModel):
    SendingPoolName: Optional[PoolName] = None
    TlsPolicy_1: Optional[TlsPolicy] = Field(None, alias='TlsPolicy')


class TrackingOptions1(BaseModel):
    CustomRedirectDomain_1: Optional[CustomRedirectDomain] = Field(
        None, alias='CustomRedirectDomain'
    )


class V2EmailConfigurationSetsConfigurationSetNameDeliveryOptionsPutRequest(BaseModel):
    SendingPoolName: Optional[str] = Field(
        None,
        description='The name of the dedicated IP pool to associate with the configuration set.',
    )
    TlsPolicy_1: Optional[TlsPolicy] = Field(
        None,
        alias='TlsPolicy',
        description="Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only delivered if a TLS connection can be established. If the value is <code>Optional</code>, messages can be delivered in plain text if a TLS connection can't be established.",
    )


class V2EmailConfigurationSetsConfigurationSetNameReputationOptionsPutRequest(
    BaseModel
):
    ReputationMetricsEnabled: Optional[bool] = Field(
        None,
        description='If <code>true</code>, tracking of reputation metrics is enabled for the configuration set. If <code>false</code>, tracking of reputation metrics is disabled for the configuration set.',
    )


class V2EmailConfigurationSetsConfigurationSetNameSendingPutRequest(BaseModel):
    SendingEnabled: Optional[bool] = Field(
        None,
        description='If <code>true</code>, email sending is enabled for the configuration set. If <code>false</code>, email sending is disabled for the configuration set.',
    )


class V2EmailConfigurationSetsConfigurationSetNameSuppressionOptionsPutRequest(
    BaseModel
):
    SuppressedReasons: Optional[List[SuppressionListReason]] = Field(
        None,
        description='<p>A list that contains the reasons that email addresses are automatically added to the suppression list for your account. This list can contain any or all of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES adds an email address to the suppression list for your account when a message sent to that address results in a hard bounce.</p> </li> </ul>',
    )


class V2EmailConfigurationSetsConfigurationSetNameTrackingOptionsPutRequest(BaseModel):
    CustomRedirectDomain: Optional[str] = Field(
        None, description='The domain to use for tracking open and click events.'
    )


class V2EmailContactListsContactListNameContactsPostRequest(BaseModel):
    AttributesData: Optional[str] = Field(
        None, description='The attribute data attached to a contact.'
    )
    EmailAddress: str = Field(..., description="The contact's email address.")
    TopicPreferences: Optional[List[TopicPreference]] = Field(
        None,
        description="The contact's preferences for being opted-in to or opted-out of topics.",
    )
    UnsubscribeAll: Optional[bool] = Field(
        None,
        description='A boolean value status noting if the contact is unsubscribed from all contact list topics.',
    )


class V2EmailContactListsContactListNameContactsEmailAddressPutRequest(BaseModel):
    AttributesData: Optional[str] = Field(
        None, description='The attribute data attached to a contact.'
    )
    TopicPreferences: Optional[List[TopicPreference]] = Field(
        None,
        description="The contact's preference for being opted-in to or opted-out of a topic.",
    )
    UnsubscribeAll: Optional[bool] = Field(
        None,
        description='A boolean value status noting if the contact is unsubscribed from all contact list topics.',
    )


class V2EmailCustomVerificationEmailTemplatesPostRequest(BaseModel):
    FailureRedirectionURL: str = Field(
        ...,
        description='The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.',
    )
    FromEmailAddress: str = Field(
        ...,
        description='The email address that the custom verification email is sent from.',
    )
    SuccessRedirectionURL: str = Field(
        ...,
        description='The URL that the recipient of the verification email is sent to if his or her address is successfully verified.',
    )
    TemplateContent: str = Field(
        ..., description='The content of the custom verification email template.'
    )
    TemplateName: constr(min_length=1) = Field(
        ...,
        description='The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.',
    )
    TemplateSubject: str = Field(..., description='The subject line of the email.')


class V2EmailCustomVerificationEmailTemplatesTemplateNamePutRequest(BaseModel):
    FailureRedirectionURL: str = Field(
        ...,
        description='The URL that the recipient of the verification email is sent to if his or her address is not successfully verified.',
    )
    FromEmailAddress: str = Field(
        ...,
        description='The email address that the custom verification email is sent from.',
    )
    SuccessRedirectionURL: str = Field(
        ...,
        description='The URL that the recipient of the verification email is sent to if his or her address is successfully verified.',
    )
    TemplateContent: str = Field(
        ..., description='The content of the custom verification email template.'
    )
    TemplateSubject: str = Field(..., description='The subject line of the email.')


class V2EmailDedicatedIpsIPPoolPutRequest(BaseModel):
    DestinationPoolName: str = Field(
        ..., description='The name of a dedicated IP pool.'
    )


class V2EmailDedicatedIpsIPWarmupPutRequest(BaseModel):
    WarmupPercentage: int = Field(
        ...,
        description='The warm-up percentage that you want to associate with the dedicated IP address.',
    )


class DkimSigningAttributes(BaseModel):
    DomainSigningPrivateKey: Optional[PrivateKey] = None
    DomainSigningSelector: Optional[Selector] = None
    NextSigningKeyLength: Optional[DkimSigningKeyLength] = None


class V2EmailIdentitiesEmailIdentityConfigurationSetPutRequest(BaseModel):
    ConfigurationSetName: Optional[str] = Field(
        None,
        description='<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )


class V2EmailIdentitiesEmailIdentityDkimPutRequest(BaseModel):
    SigningEnabled: Optional[bool] = Field(
        None,
        description='<p>Sets the DKIM signing configuration for the identity.</p> <p>When you set this value <code>true</code>, then the messages that are sent from the identity are signed using DKIM. If you set this value to <code>false</code>, your messages are sent without DKIM signing.</p>',
    )


class V2EmailIdentitiesEmailIdentityFeedbackPutRequest(BaseModel):
    EmailForwardingEnabled: Optional[bool] = Field(
        None,
        description="<p>Sets the feedback forwarding configuration for the identity.</p> <p>If the value is <code>true</code>, you receive email notifications when bounce or complaint events occur. These notifications are sent to the address that you specified in the <code>Return-Path</code> header of the original email.</p> <p>You're required to have a method of tracking bounces and complaints. If you haven't set up another mechanism for receiving bounce or complaint notifications (for example, by setting up an event destination), you receive an email notification when these events occur (even if this setting is disabled).</p>",
    )


class V2EmailIdentitiesEmailIdentityMailFromPutRequest(BaseModel):
    BehaviorOnMxFailure_1: Optional[BehaviorOnMxFailure] = Field(
        None,
        alias='BehaviorOnMxFailure',
        description="<p>The action to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>",
    )
    MailFromDomain: Optional[str] = Field(
        None, description='The domain to use as a MAIL FROM domain.'
    )


class V2EmailIdentitiesEmailIdentityPoliciesPolicyNamePostRequest(BaseModel):
    Policy: constr(min_length=1) = Field(
        ...,
        description='<p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>',
    )


class V2EmailIdentitiesEmailIdentityPoliciesPolicyNamePutRequest(BaseModel):
    Policy: constr(min_length=1) = Field(
        ...,
        description='<p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p> <p>For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>',
    )


class V2EmailImportJobsGetRequest(BaseModel):
    ImportDestinationType_1: Optional[ImportDestinationType] = Field(
        None,
        alias='ImportDestinationType',
        description='The destination of the import job, which can be used to list import jobs that have a certain <code>ImportDestinationType</code>.',
    )


class ImportDataSource1(BaseModel):
    DataFormat_1: Optional[DataFormat] = Field(None, alias='DataFormat')
    S3Url_1: Optional[S3Url] = Field(None, alias='S3Url')


class DefaultContent(BaseModel):
    Template_1: Optional[Template] = Field(None, alias='Template')


class V2EmailOutboundCustomVerificationEmailsPostRequest(BaseModel):
    ConfigurationSetName: Optional[str] = Field(
        None,
        description='<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )
    EmailAddress: str = Field(..., description='The email address to verify.')
    TemplateName: constr(min_length=1) = Field(
        ...,
        description='The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.',
    )


class Destination(BaseModel):
    BccAddresses: Optional[EmailAddressList] = None
    CcAddresses: Optional[EmailAddressList] = None
    ToAddresses: Optional[EmailAddressList] = None


class ListManagementOptions1(BaseModel):
    ContactListName_1: Optional[ContactListName] = Field(None, alias='ContactListName')
    TopicName_1: Optional[TopicName] = Field(None, alias='TopicName')


class Reason(RootModel[List[SuppressionListReason]]):
    root: List[SuppressionListReason]


class Reason1(Enum):
    BOUNCE = 'BOUNCE'
    COMPLAINT = 'COMPLAINT'


class V2EmailSuppressionAddressesPutRequest(BaseModel):
    EmailAddress: str = Field(
        ...,
        description='The email address that should be added to the suppression list for your account.',
    )
    Reason: Reason1 = Field(
        ...,
        description='<p>The reason that the address was added to the suppression list for your account. The value can be one of the following:</p> <ul> <li> <p> <code>COMPLAINT</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a complaint.</p> </li> <li> <p> <code>BOUNCE</code> – Amazon SES added an email address to the suppression list for your account because a message sent to that address results in a hard bounce.</p> </li> </ul>',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class TemplateContent1(BaseModel):
    Html: Optional[EmailTemplateHtml] = None
    Subject: Optional[EmailTemplateSubject] = None
    Text: Optional[EmailTemplateText] = None


class V2EmailTemplatesPostRequest(BaseModel):
    TemplateContent: TemplateContent1 = Field(
        ...,
        description='The content of the email, composed of a subject line, an HTML part, and a text-only part.',
    )
    TemplateName: constr(min_length=1) = Field(
        ...,
        description='The name of the template. You will refer to this name when you send email using the <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code> operations.',
    )


class V2EmailTemplatesTemplateNamePutRequest(BaseModel):
    TemplateContent: TemplateContent1 = Field(
        ...,
        description='The content of the email, composed of a subject line, an HTML part, and a text-only part.',
    )


class V2EmailTemplatesTemplateNameRenderPostRequest(BaseModel):
    TemplateData: constr(max_length=262144) = Field(
        ...,
        description='An object that defines the values to use for message variables in the template. This object is a set of key-value pairs. Each key defines a message variable in the template. The corresponding value defines the value to use for that variable.',
    )


class V2EmailVdmRecommendationsPostRequest(BaseModel):
    Filter: Optional[Dict[str, ListRecommendationFilterValue]] = Field(
        None,
        description='An object that contains mapping between <code>ListRecommendationsFilterKey</code> and <code>ListRecommendationFilterValue</code> to filter by.',
    )
    NextToken: Optional[str] = Field(
        None,
        description='A token returned from a previous call to <code>ListRecommendations</code> to indicate the position in the list of recommendations.',
    )
    PageSize: Optional[int] = Field(
        None,
        description='<p>The number of results to show in a single call to <code>ListRecommendations</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p> <p>The value you specify has to be at least 1, and can be no more than 100.</p>',
    )


class BlacklistEntry(BaseModel):
    Description: Optional[BlacklistingDescription] = None
    ListingTime: Optional[Timestamp] = None
    RblName_1: Optional[RblName] = Field(None, alias='RblName')


class BulkEmailContent(BaseModel):
    Template_1: Optional[Template] = Field(None, alias='Template')


class BulkEmailEntryResult(BaseModel):
    Error: Optional[ErrorMessage] = None
    MessageId: Optional[OutboundMessageId] = None
    Status: Optional[BulkEmailStatus] = None


class BulkEmailEntryResultList(RootModel[List[BulkEmailEntryResult]]):
    root: List[BulkEmailEntryResult] = Field(
        ..., description='A list of <code>BulkMailEntry</code> objects.'
    )


class CloudWatchDimensionConfiguration(BaseModel):
    DefaultDimensionValue_1: DefaultDimensionValue = Field(
        ..., alias='DefaultDimensionValue'
    )
    DimensionName_1: DimensionName = Field(..., alias='DimensionName')
    DimensionValueSource_1: DimensionValueSource = Field(
        ..., alias='DimensionValueSource'
    )


class CloudWatchDimensionConfigurations(
    RootModel[List[CloudWatchDimensionConfiguration]]
):
    root: List[CloudWatchDimensionConfiguration]


class Contact(BaseModel):
    EmailAddress_1: Optional[EmailAddress] = Field(None, alias='EmailAddress')
    LastUpdatedTimestamp: Optional[Timestamp] = None
    TopicDefaultPreferences: Optional[TopicPreferenceList] = None
    TopicPreferences: Optional[TopicPreferenceList] = None
    UnsubscribeAll_1: Optional[UnsubscribeAll] = Field(None, alias='UnsubscribeAll')


class ContactList(BaseModel):
    ContactListName_1: Optional[ContactListName] = Field(None, alias='ContactListName')
    LastUpdatedTimestamp: Optional[Timestamp] = None


class ContactListDestination(BaseModel):
    ContactListImportAction_1: ContactListImportAction = Field(
        ..., alias='ContactListImportAction'
    )
    ContactListName_1: ContactListName = Field(..., alias='ContactListName')


class Content(BaseModel):
    Charset_1: Optional[Charset] = Field(None, alias='Charset')
    Data: MessageData


class CreateContactRequest(BaseModel):
    AttributesData_1: Optional[AttributesData] = Field(None, alias='AttributesData')
    EmailAddress_1: EmailAddress = Field(..., alias='EmailAddress')
    TopicPreferences: Optional[TopicPreferenceList] = None
    UnsubscribeAll_1: Optional[UnsubscribeAll] = Field(None, alias='UnsubscribeAll')


class CreateCustomVerificationEmailTemplateRequest(BaseModel):
    FailureRedirectionURL_1: FailureRedirectionURL = Field(
        ..., alias='FailureRedirectionURL'
    )
    FromEmailAddress: EmailAddress
    SuccessRedirectionURL_1: SuccessRedirectionURL = Field(
        ..., alias='SuccessRedirectionURL'
    )
    TemplateContent_1: TemplateContent = Field(..., alias='TemplateContent')
    TemplateName: EmailTemplateName
    TemplateSubject: EmailTemplateSubject


class CreateDeliverabilityTestReportResponse(BaseModel):
    DeliverabilityTestStatus_1: DeliverabilityTestStatus = Field(
        ..., alias='DeliverabilityTestStatus'
    )
    ReportId_1: ReportId = Field(..., alias='ReportId')


class CreateEmailIdentityPolicyRequest(BaseModel):
    Policy_1: Policy = Field(..., alias='Policy')


class CreateImportJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')


class CustomVerificationEmailTemplateMetadata(BaseModel):
    FailureRedirectionURL_1: Optional[FailureRedirectionURL] = Field(
        None, alias='FailureRedirectionURL'
    )
    FromEmailAddress: Optional[EmailAddress] = None
    SuccessRedirectionURL_1: Optional[SuccessRedirectionURL] = Field(
        None, alias='SuccessRedirectionURL'
    )
    TemplateName: Optional[EmailTemplateName] = None
    TemplateSubject: Optional[EmailTemplateSubject] = None


class CustomVerificationEmailTemplatesList(
    RootModel[List[CustomVerificationEmailTemplateMetadata]]
):
    root: List[CustomVerificationEmailTemplateMetadata] = Field(
        ...,
        description='A list of the custom verification email templates that exist in your account.',
    )


class DashboardAttributes(BaseModel):
    EngagementMetrics: Optional[FeatureStatus] = None


class DashboardOptions(BaseModel):
    EngagementMetrics: Optional[FeatureStatus] = None


class DedicatedIp(BaseModel):
    Ip_1: Ip = Field(..., alias='Ip')
    PoolName_1: Optional[PoolName] = Field(None, alias='PoolName')
    WarmupPercentage: Percentage100Wrapper
    WarmupStatus_1: WarmupStatus = Field(..., alias='WarmupStatus')


class DedicatedIpList(RootModel[List[DedicatedIp]]):
    root: List[DedicatedIp] = Field(
        ...,
        description='A list of dedicated IP addresses that are associated with your Amazon Web Services account.',
    )


class DedicatedIpPool(BaseModel):
    PoolName_1: PoolName = Field(..., alias='PoolName')
    ScalingMode_1: ScalingMode = Field(..., alias='ScalingMode')


class DeliverabilityTestReport(BaseModel):
    CreateDate: Optional[Timestamp] = None
    DeliverabilityTestStatus_1: Optional[DeliverabilityTestStatus] = Field(
        None, alias='DeliverabilityTestStatus'
    )
    FromEmailAddress: Optional[EmailAddress] = None
    ReportId_1: Optional[ReportId] = Field(None, alias='ReportId')
    ReportName_1: Optional[ReportName] = Field(None, alias='ReportName')
    Subject: Optional[DeliverabilityTestSubject] = None


class DeliverabilityTestReports(RootModel[List[DeliverabilityTestReport]]):
    root: List[DeliverabilityTestReport]


class Dimensions(RootModel[Optional[Dict[str, MetricDimensionValue]]]):
    root: Optional[Dict[str, MetricDimensionValue]] = None


class DkimAttributes(BaseModel):
    CurrentSigningKeyLength: Optional[DkimSigningKeyLength] = None
    LastKeyGenerationTimestamp: Optional[Timestamp] = None
    NextSigningKeyLength: Optional[DkimSigningKeyLength] = None
    SigningAttributesOrigin: Optional[DkimSigningAttributesOrigin] = None
    SigningEnabled: Optional[Enabled] = None
    Status: Optional[DkimStatus] = None
    Tokens: Optional[DnsTokenList] = None


class DomainDeliverabilityCampaign(BaseModel):
    CampaignId_1: Optional[CampaignId] = Field(None, alias='CampaignId')
    DeleteRate: Optional[Percentage] = None
    Esps_1: Optional[Esps] = Field(None, alias='Esps')
    FirstSeenDateTime: Optional[Timestamp] = None
    FromAddress: Optional[Identity] = None
    ImageUrl_1: Optional[ImageUrl] = Field(None, alias='ImageUrl')
    InboxCount: Optional[Volume] = None
    LastSeenDateTime: Optional[Timestamp] = None
    ProjectedVolume: Optional[Volume] = None
    ReadDeleteRate: Optional[Percentage] = None
    ReadRate: Optional[Percentage] = None
    SendingIps: Optional[IpList] = None
    SpamCount: Optional[Volume] = None
    Subject_1: Optional[Subject] = Field(None, alias='Subject')


class DomainDeliverabilityCampaignList(RootModel[List[DomainDeliverabilityCampaign]]):
    root: List[DomainDeliverabilityCampaign] = Field(..., description='<p/>')


class DomainIspPlacement(BaseModel):
    InboxPercentage: Optional[Percentage] = None
    InboxRawCount: Optional[Volume] = None
    IspName_1: Optional[IspName] = Field(None, alias='IspName')
    SpamPercentage: Optional[Percentage] = None
    SpamRawCount: Optional[Volume] = None


class DomainIspPlacements(RootModel[List[DomainIspPlacement]]):
    root: List[DomainIspPlacement]


class EmailTemplateContent(BaseModel):
    Html: Optional[EmailTemplateHtml] = None
    Subject: Optional[EmailTemplateSubject] = None
    Text: Optional[EmailTemplateText] = None


class EmailTemplateMetadata(BaseModel):
    CreatedTimestamp: Optional[Timestamp] = None
    TemplateName: Optional[EmailTemplateName] = None


class EmailTemplateMetadataList(RootModel[List[EmailTemplateMetadata]]):
    root: List[EmailTemplateMetadata] = Field(
        ..., description='A list of the EmailTemplateMetadata object.'
    )


class GetContactResponse(BaseModel):
    AttributesData_1: Optional[AttributesData] = Field(None, alias='AttributesData')
    ContactListName_1: Optional[ContactListName] = Field(None, alias='ContactListName')
    CreatedTimestamp: Optional[Timestamp] = None
    EmailAddress_1: Optional[EmailAddress] = Field(None, alias='EmailAddress')
    LastUpdatedTimestamp: Optional[Timestamp] = None
    TopicDefaultPreferences: Optional[TopicPreferenceList] = None
    TopicPreferences: Optional[TopicPreferenceList] = None
    UnsubscribeAll_1: Optional[UnsubscribeAll] = Field(None, alias='UnsubscribeAll')


class GetCustomVerificationEmailTemplateResponse(BaseModel):
    FailureRedirectionURL_1: Optional[FailureRedirectionURL] = Field(
        None, alias='FailureRedirectionURL'
    )
    FromEmailAddress: Optional[EmailAddress] = None
    SuccessRedirectionURL_1: Optional[SuccessRedirectionURL] = Field(
        None, alias='SuccessRedirectionURL'
    )
    TemplateContent_1: Optional[TemplateContent] = Field(None, alias='TemplateContent')
    TemplateName: Optional[EmailTemplateName] = None
    TemplateSubject: Optional[EmailTemplateSubject] = None


class GetDedicatedIpPoolResponse(BaseModel):
    DedicatedIpPool_1: Optional[DedicatedIpPool] = Field(None, alias='DedicatedIpPool')


class GetDedicatedIpResponse(BaseModel):
    DedicatedIp_1: Optional[DedicatedIp] = Field(None, alias='DedicatedIp')


class GetDedicatedIpsResponse(BaseModel):
    DedicatedIps: Optional[DedicatedIpList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetDomainDeliverabilityCampaignResponse(BaseModel):
    DomainDeliverabilityCampaign_1: DomainDeliverabilityCampaign = Field(
        ..., alias='DomainDeliverabilityCampaign'
    )


class GetEmailIdentityPoliciesResponse(BaseModel):
    Policies: Optional[PolicyMap] = None


class GetEmailTemplateResponse(BaseModel):
    TemplateContent: EmailTemplateContent
    TemplateName: EmailTemplateName


class IdentityInfo(BaseModel):
    IdentityName: Optional[Identity] = None
    IdentityType_1: Optional[IdentityType] = Field(None, alias='IdentityType')
    SendingEnabled: Optional[Enabled] = None
    VerificationStatus_1: Optional[VerificationStatus] = Field(
        None, alias='VerificationStatus'
    )


class IdentityInfoList(RootModel[List[IdentityInfo]]):
    root: List[IdentityInfo]


class ImportDataSource(BaseModel):
    DataFormat_1: DataFormat = Field(..., alias='DataFormat')
    S3Url_1: S3Url = Field(..., alias='S3Url')


class InboxPlacementTrackingOption(BaseModel):
    Global: Optional[Enabled] = None
    TrackedIsps: Optional[IspNameList] = None


class IspPlacement(BaseModel):
    IspName_1: Optional[IspName] = Field(None, alias='IspName')
    PlacementStatistics_1: Optional[PlacementStatistics] = Field(
        None, alias='PlacementStatistics'
    )


class IspPlacements(RootModel[List[IspPlacement]]):
    root: List[IspPlacement]


class ListConfigurationSetsResponse(BaseModel):
    ConfigurationSets: Optional[ConfigurationSetNameList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCustomVerificationEmailTemplatesResponse(BaseModel):
    CustomVerificationEmailTemplates: Optional[CustomVerificationEmailTemplatesList] = (
        None
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDeliverabilityTestReportsResponse(BaseModel):
    DeliverabilityTestReports_1: DeliverabilityTestReports = Field(
        ..., alias='DeliverabilityTestReports'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDomainDeliverabilityCampaignsResponse(BaseModel):
    DomainDeliverabilityCampaigns: DomainDeliverabilityCampaignList
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEmailIdentitiesResponse(BaseModel):
    EmailIdentities: Optional[IdentityInfoList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEmailTemplatesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TemplatesMetadata: Optional[EmailTemplateMetadataList] = None


class ListManagementOptions(BaseModel):
    ContactListName_1: ContactListName = Field(..., alias='ContactListName')
    TopicName_1: Optional[TopicName] = Field(None, alias='TopicName')


class ListOfContactLists(RootModel[List[ContactList]]):
    root: List[ContactList]


class ListOfContacts(RootModel[List[Contact]]):
    root: List[Contact]


class ListOfDedicatedIpPools(RootModel[List[PoolName]]):
    root: List[PoolName] = Field(
        ...,
        description='A list of dedicated IP pools that are associated with your Amazon Web Services account.',
    )


class ListRecommendationsRequest(BaseModel):
    Filter: Optional[ListRecommendationsFilter] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    PageSize: Optional[MaxItems] = None


class MailFromAttributes(BaseModel):
    BehaviorOnMxFailure_1: BehaviorOnMxFailure = Field(..., alias='BehaviorOnMxFailure')
    MailFromDomain: MailFromDomainName
    MailFromDomainStatus_1: MailFromDomainStatus = Field(
        ..., alias='MailFromDomainStatus'
    )


class MessageTag(BaseModel):
    Name: MessageTagName
    Value: MessageTagValue


class MessageTagList(RootModel[List[MessageTag]]):
    root: List[MessageTag] = Field(..., description='A list of message tags.')


class MetricDataError(BaseModel):
    Code: Optional[QueryErrorCode] = None
    Id: Optional[QueryIdentifier] = None
    Message: Optional[QueryErrorMessage] = None


class MetricDataErrorList(RootModel[List[MetricDataError]]):
    root: List[MetricDataError]


class MetricDataResult(BaseModel):
    Id: Optional[QueryIdentifier] = None
    Timestamps: Optional[TimestampList] = None
    Values: Optional[MetricValueList] = None


class MetricDataResultList(RootModel[List[MetricDataResult]]):
    root: List[MetricDataResult]


class OverallVolume(BaseModel):
    DomainIspPlacements_1: Optional[DomainIspPlacements] = Field(
        None, alias='DomainIspPlacements'
    )
    ReadRatePercent: Optional[Percentage] = None
    VolumeStatistics_1: Optional[VolumeStatistics] = Field(
        None, alias='VolumeStatistics'
    )


class PutAccountDetailsRequest(BaseModel):
    AdditionalContactEmailAddresses_1: Optional[AdditionalContactEmailAddresses] = (
        Field(None, alias='AdditionalContactEmailAddresses')
    )
    ContactLanguage_1: Optional[ContactLanguage] = Field(None, alias='ContactLanguage')
    MailType_1: MailType = Field(..., alias='MailType')
    ProductionAccessEnabled: Optional[EnabledWrapper] = None
    UseCaseDescription_1: UseCaseDescription = Field(..., alias='UseCaseDescription')
    WebsiteURL_1: WebsiteURL = Field(..., alias='WebsiteURL')


class PutAccountSuppressionAttributesRequest(BaseModel):
    SuppressedReasons: Optional[SuppressionListReasons] = None


class PutConfigurationSetDeliveryOptionsRequest(BaseModel):
    SendingPoolName_1: Optional[SendingPoolName] = Field(None, alias='SendingPoolName')
    TlsPolicy_1: Optional[TlsPolicy] = Field(None, alias='TlsPolicy')


class PutConfigurationSetSuppressionOptionsRequest(BaseModel):
    SuppressedReasons: Optional[SuppressionListReasons] = None


class PutEmailIdentityDkimSigningAttributesRequest(BaseModel):
    SigningAttributes: Optional[DkimSigningAttributes] = None
    SigningAttributesOrigin: DkimSigningAttributesOrigin


class PutSuppressedDestinationRequest(BaseModel):
    EmailAddress_1: EmailAddress = Field(..., alias='EmailAddress')
    Reason: SuppressionListReason


class RawMessage(BaseModel):
    Data: RawMessageData


class Recommendation(BaseModel):
    CreatedTimestamp: Optional[Timestamp] = None
    Description: Optional[RecommendationDescription] = None
    Impact: Optional[RecommendationImpact] = None
    LastUpdatedTimestamp: Optional[Timestamp] = None
    ResourceArn: Optional[AmazonResourceName] = None
    Status: Optional[RecommendationStatus] = None
    Type: Optional[RecommendationType] = None


class RecommendationsList(RootModel[List[Recommendation]]):
    root: List[Recommendation]


class ReplacementEmailContent(BaseModel):
    ReplacementTemplate_1: Optional[ReplacementTemplate] = Field(
        None, alias='ReplacementTemplate'
    )


class ReviewDetails(BaseModel):
    CaseId_1: Optional[CaseId] = Field(None, alias='CaseId')
    Status: Optional[ReviewStatus] = None


class SendBulkEmailResponse(BaseModel):
    BulkEmailEntryResults: BulkEmailEntryResultList


class SendQuota(BaseModel):
    Max24HourSend_1: Optional[Max24HourSend] = Field(None, alias='Max24HourSend')
    MaxSendRate_1: Optional[MaxSendRate] = Field(None, alias='MaxSendRate')
    SentLast24Hours_1: Optional[SentLast24Hours] = Field(None, alias='SentLast24Hours')


class SuppressedDestination(BaseModel):
    Attributes: Optional[SuppressedDestinationAttributes] = None
    EmailAddress_1: EmailAddress = Field(..., alias='EmailAddress')
    LastUpdateTime: Timestamp
    Reason: SuppressionListReason


class SuppressedDestinationSummary(BaseModel):
    EmailAddress_1: EmailAddress = Field(..., alias='EmailAddress')
    LastUpdateTime: Timestamp
    Reason: SuppressionListReason


class SuppressionAttributes(BaseModel):
    SuppressedReasons: Optional[SuppressionListReasons] = None


class SuppressionListDestination(BaseModel):
    SuppressionListImportAction_1: SuppressionListImportAction = Field(
        ..., alias='SuppressionListImportAction'
    )


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceName
    Tags: TagList


class Topic(BaseModel):
    DefaultSubscriptionStatus: SubscriptionStatus
    Description_1: Optional[Description] = Field(None, alias='Description')
    DisplayName_1: DisplayName = Field(..., alias='DisplayName')
    TopicName_1: TopicName = Field(..., alias='TopicName')


class TopicFilter(BaseModel):
    TopicName_1: Optional[TopicName] = Field(None, alias='TopicName')
    UseDefaultIfPreferenceUnavailable_1: Optional[UseDefaultIfPreferenceUnavailable] = (
        Field(None, alias='UseDefaultIfPreferenceUnavailable')
    )


class Topics(RootModel[List[Topic]]):
    root: List[Topic]


class UpdateContactListRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Topics_1: Optional[Topics] = Field(None, alias='Topics')


class UpdateEmailTemplateRequest(BaseModel):
    TemplateContent: EmailTemplateContent


class VdmAttributes(BaseModel):
    DashboardAttributes_1: Optional[DashboardAttributes] = Field(
        None, alias='DashboardAttributes'
    )
    GuardianAttributes_1: Optional[GuardianAttributes] = Field(
        None, alias='GuardianAttributes'
    )
    VdmEnabled: FeatureStatus


class VdmOptions(BaseModel):
    DashboardOptions_1: Optional[DashboardOptions] = Field(
        None, alias='DashboardOptions'
    )
    GuardianOptions_1: Optional[GuardianOptions] = Field(None, alias='GuardianOptions')


class VdmAttributes1(BaseModel):
    DashboardAttributes_1: Optional[DashboardAttributes] = Field(
        None, alias='DashboardAttributes'
    )
    GuardianAttributes_1: Optional[GuardianAttributes] = Field(
        None, alias='GuardianAttributes'
    )
    VdmEnabled: Optional[FeatureStatus] = None


class V2EmailAccountVdmPutRequest(BaseModel):
    VdmAttributes: VdmAttributes1 = Field(
        ..., description='The VDM attributes that apply to your Amazon SES account.'
    )


class V2EmailConfigurationSetsPostRequest(BaseModel):
    ConfigurationSetName: str = Field(
        ...,
        description='<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )
    DeliveryOptions_1: Optional[DeliveryOptions] = Field(
        None,
        alias='DeliveryOptions',
        description='Used to associate a configuration set with a dedicated IP pool.',
    )
    ReputationOptions_1: Optional[ReputationOptions] = Field(
        None,
        alias='ReputationOptions',
        description='Enable or disable collection of reputation metrics for emails that you send using this configuration set in the current Amazon Web Services Region. ',
    )
    SendingOptions_1: Optional[SendingOptions] = Field(
        None,
        alias='SendingOptions',
        description='Used to enable or disable email sending for messages that use this configuration set in the current Amazon Web Services Region.',
    )
    SuppressionOptions_1: Optional[SuppressionOptions] = Field(
        None,
        alias='SuppressionOptions',
        description='An object that contains information about the suppression list preferences for your account.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='An array of objects that define the tags (keys and values) to associate with the configuration set.',
    )
    TrackingOptions: Optional[TrackingOptions1] = Field(
        None,
        description="<p>An object that defines the tracking options for a configuration set. When you use the Amazon SES API v2 to send an email, it contains an invisible image that's used to track when recipients open your email. If your email contains links, those links are changed slightly in order to track when recipients click them.</p> <p>These images and links include references to a domain operated by Amazon Web Services. You can optionally configure the Amazon SES to use a domain that you operate for these images and links.</p>",
    )
    VdmOptions_1: Optional[VdmOptions] = Field(
        None,
        alias='VdmOptions',
        description='An object that defines the VDM settings that apply to emails that you send using the configuration set.',
    )


class V2EmailConfigurationSetsConfigurationSetNameVdmOptionsPutRequest(BaseModel):
    VdmOptions_1: Optional[VdmOptions] = Field(
        None,
        alias='VdmOptions',
        description='An object that defines the VDM settings that apply to emails that you send using the configuration set.',
    )


class V2EmailContactListsPostRequest(BaseModel):
    ContactListName: str = Field(..., description='The name of the contact list.')
    Description: Optional[str] = Field(
        None, description='A description of what the contact list is about.'
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='The tags associated with a contact list.'
    )
    Topics: Optional[List[Topic]] = Field(
        None,
        description='An interest group, theme, or label within a list. A contact list can have multiple topics.',
    )


class V2EmailContactListsContactListNamePutRequest(BaseModel):
    Description: Optional[str] = Field(
        None, description='A description of what the contact list is about.'
    )
    Topics: Optional[List[Topic]] = Field(
        None,
        description='An interest group, theme, or label within a list. A contact list can have multiple topics.',
    )


class Filter(BaseModel):
    FilteredStatus: Optional[SubscriptionStatus] = None
    TopicFilter_1: Optional[TopicFilter] = Field(None, alias='TopicFilter')


class V2EmailContactListsContactListNameContactsGetRequest(BaseModel):
    Filter_1: Optional[Filter] = Field(
        None,
        alias='Filter',
        description='A filter that can be applied to a list of contacts.',
    )


class V2EmailDedicatedIpPoolsPostRequest(BaseModel):
    PoolName: str = Field(..., description='The name of a dedicated IP pool.')
    ScalingMode_1: Optional[ScalingMode] = Field(
        None, alias='ScalingMode', description='The type of scaling mode.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='An object that defines the tags (keys and values) that you want to associate with the pool.',
    )


class V2EmailIdentitiesPostRequest(BaseModel):
    ConfigurationSetName: Optional[str] = Field(
        None,
        description='<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )
    DkimSigningAttributes_1: Optional[DkimSigningAttributes] = Field(
        None,
        alias='DkimSigningAttributes',
        description='An object that contains configuration for Bring Your Own DKIM (BYODKIM), or, for Easy DKIM',
    )
    EmailIdentity: constr(min_length=1) = Field(
        ..., description='The email address or domain to verify.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='An array of objects that define the tags (keys and values) to associate with the email identity.',
    )


class ImportDestination(BaseModel):
    ContactListDestination_1: Optional[ContactListDestination] = Field(
        None, alias='ContactListDestination'
    )
    SuppressionListDestination_1: Optional[SuppressionListDestination] = Field(
        None, alias='SuppressionListDestination'
    )


class V2EmailImportJobsPostRequest(BaseModel):
    ImportDataSource: ImportDataSource1 = Field(
        ...,
        description='An object that contains details about the data source of the import job.',
    )
    ImportDestination_1: ImportDestination = Field(
        ...,
        alias='ImportDestination',
        description='An object that contains details about the resource destination the import job is going to target.',
    )


class V2EmailTagsPostRequest(BaseModel):
    ResourceArn: str = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the resource that you want to add one or more tags to.',
    )
    Tags: List[Tag] = Field(
        ...,
        description='A list of the tags that you want to add to the resource. A tag consists of a required tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.',
    )


class AccountDetails(BaseModel):
    AdditionalContactEmailAddresses_1: Optional[AdditionalContactEmailAddresses] = (
        Field(None, alias='AdditionalContactEmailAddresses')
    )
    ContactLanguage_1: Optional[ContactLanguage] = Field(None, alias='ContactLanguage')
    MailType_1: Optional[MailType] = Field(None, alias='MailType')
    ReviewDetails_1: Optional[ReviewDetails] = Field(None, alias='ReviewDetails')
    UseCaseDescription_1: Optional[UseCaseDescription] = Field(
        None, alias='UseCaseDescription'
    )
    WebsiteURL_1: Optional[WebsiteURL] = Field(None, alias='WebsiteURL')


class BatchGetMetricDataQuery(BaseModel):
    Dimensions_1: Optional[Dimensions] = Field(None, alias='Dimensions')
    EndDate: Timestamp
    Id: QueryIdentifier
    Metric_1: Metric = Field(..., alias='Metric')
    Namespace: MetricNamespace
    StartDate: Timestamp


class BatchGetMetricDataResponse(BaseModel):
    Errors: Optional[MetricDataErrorList] = None
    Results: Optional[MetricDataResultList] = None


class BlacklistEntries(RootModel[List[BlacklistEntry]]):
    root: List[BlacklistEntry]


class BlacklistReport(RootModel[Optional[Dict[str, BlacklistEntries]]]):
    root: Optional[Dict[str, BlacklistEntries]] = None


class Body(BaseModel):
    Html: Optional[Content] = None
    Text: Optional[Content] = None


class BulkEmailEntry(BaseModel):
    Destination_1: Destination = Field(..., alias='Destination')
    ReplacementEmailContent_1: Optional[ReplacementEmailContent] = Field(
        None, alias='ReplacementEmailContent'
    )
    ReplacementTags: Optional[MessageTagList] = None


class BulkEmailEntryList(RootModel[List[BulkEmailEntry]]):
    root: List[BulkEmailEntry] = Field(
        ..., description='A list of <code>BulkEmailEntry</code> objects.'
    )


class CloudWatchDestination(BaseModel):
    DimensionConfigurations: CloudWatchDimensionConfigurations


class CreateConfigurationSetRequest(BaseModel):
    ConfigurationSetName_1: ConfigurationSetName = Field(
        ..., alias='ConfigurationSetName'
    )
    DeliveryOptions_1: Optional[DeliveryOptions] = Field(None, alias='DeliveryOptions')
    ReputationOptions_1: Optional[ReputationOptions] = Field(
        None, alias='ReputationOptions'
    )
    SendingOptions_1: Optional[SendingOptions] = Field(None, alias='SendingOptions')
    SuppressionOptions_1: Optional[SuppressionOptions] = Field(
        None, alias='SuppressionOptions'
    )
    Tags: Optional[TagList] = None
    TrackingOptions_1: Optional[TrackingOptions] = Field(None, alias='TrackingOptions')
    VdmOptions_1: Optional[VdmOptions] = Field(None, alias='VdmOptions')


class CreateContactListRequest(BaseModel):
    ContactListName_1: ContactListName = Field(..., alias='ContactListName')
    Description_1: Optional[Description] = Field(None, alias='Description')
    Tags: Optional[TagList] = None
    Topics_1: Optional[Topics] = Field(None, alias='Topics')


class CreateDedicatedIpPoolRequest(BaseModel):
    PoolName_1: PoolName = Field(..., alias='PoolName')
    ScalingMode_1: Optional[ScalingMode] = Field(None, alias='ScalingMode')
    Tags: Optional[TagList] = None


class CreateEmailIdentityRequest(BaseModel):
    ConfigurationSetName_1: Optional[ConfigurationSetName] = Field(
        None, alias='ConfigurationSetName'
    )
    DkimSigningAttributes_1: Optional[DkimSigningAttributes] = Field(
        None, alias='DkimSigningAttributes'
    )
    EmailIdentity: Identity
    Tags: Optional[TagList] = None


class CreateEmailIdentityResponse(BaseModel):
    DkimAttributes_1: Optional[DkimAttributes] = Field(None, alias='DkimAttributes')
    IdentityType_1: Optional[IdentityType] = Field(None, alias='IdentityType')
    VerifiedForSendingStatus: Optional[Enabled] = None


class CreateEmailTemplateRequest(BaseModel):
    TemplateContent: EmailTemplateContent
    TemplateName: EmailTemplateName


class DailyVolume(BaseModel):
    DomainIspPlacements_1: Optional[DomainIspPlacements] = Field(
        None, alias='DomainIspPlacements'
    )
    StartDate: Optional[Timestamp] = None
    VolumeStatistics_1: Optional[VolumeStatistics] = Field(
        None, alias='VolumeStatistics'
    )


class DailyVolumes(RootModel[List[DailyVolume]]):
    root: List[DailyVolume]


class DomainDeliverabilityTrackingOption(BaseModel):
    Domain_1: Optional[Domain] = Field(None, alias='Domain')
    InboxPlacementTrackingOption_1: Optional[InboxPlacementTrackingOption] = Field(
        None, alias='InboxPlacementTrackingOption'
    )
    SubscriptionStartDate: Optional[Timestamp] = None


class DomainDeliverabilityTrackingOptions(
    RootModel[List[DomainDeliverabilityTrackingOption]]
):
    root: List[DomainDeliverabilityTrackingOption] = Field(
        ...,
        description='An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.',
    )


class EventDestination(BaseModel):
    CloudWatchDestination_1: Optional[CloudWatchDestination] = Field(
        None, alias='CloudWatchDestination'
    )
    Enabled_1: Optional[Enabled] = Field(None, alias='Enabled')
    KinesisFirehoseDestination_1: Optional[KinesisFirehoseDestination] = Field(
        None, alias='KinesisFirehoseDestination'
    )
    MatchingEventTypes: EventTypes
    Name: EventDestinationName
    PinpointDestination_1: Optional[PinpointDestination] = Field(
        None, alias='PinpointDestination'
    )
    SnsDestination_1: Optional[SnsDestination] = Field(None, alias='SnsDestination')


class EventDestinationDefinition(BaseModel):
    CloudWatchDestination_1: Optional[CloudWatchDestination] = Field(
        None, alias='CloudWatchDestination'
    )
    Enabled_1: Optional[Enabled] = Field(None, alias='Enabled')
    KinesisFirehoseDestination_1: Optional[KinesisFirehoseDestination] = Field(
        None, alias='KinesisFirehoseDestination'
    )
    MatchingEventTypes: Optional[EventTypes] = None
    PinpointDestination_1: Optional[PinpointDestination] = Field(
        None, alias='PinpointDestination'
    )
    SnsDestination_1: Optional[SnsDestination] = Field(None, alias='SnsDestination')


class EventDestinations(RootModel[List[EventDestination]]):
    root: List[EventDestination]


class GetAccountResponse(BaseModel):
    DedicatedIpAutoWarmupEnabled: Optional[Enabled] = None
    Details: Optional[AccountDetails] = None
    EnforcementStatus: Optional[GeneralEnforcementStatus] = None
    ProductionAccessEnabled: Optional[Enabled] = None
    SendQuota_1: Optional[SendQuota] = Field(None, alias='SendQuota')
    SendingEnabled: Optional[Enabled] = None
    SuppressionAttributes_1: Optional[SuppressionAttributes] = Field(
        None, alias='SuppressionAttributes'
    )
    VdmAttributes_1: Optional[VdmAttributes] = Field(None, alias='VdmAttributes')


class GetBlacklistReportsResponse(BaseModel):
    BlacklistReport_1: BlacklistReport = Field(..., alias='BlacklistReport')


class GetConfigurationSetEventDestinationsResponse(BaseModel):
    EventDestinations_1: Optional[EventDestinations] = Field(
        None, alias='EventDestinations'
    )


class GetConfigurationSetResponse(BaseModel):
    ConfigurationSetName_1: Optional[ConfigurationSetName] = Field(
        None, alias='ConfigurationSetName'
    )
    DeliveryOptions_1: Optional[DeliveryOptions] = Field(None, alias='DeliveryOptions')
    ReputationOptions_1: Optional[ReputationOptions] = Field(
        None, alias='ReputationOptions'
    )
    SendingOptions_1: Optional[SendingOptions] = Field(None, alias='SendingOptions')
    SuppressionOptions_1: Optional[SuppressionOptions] = Field(
        None, alias='SuppressionOptions'
    )
    Tags: Optional[TagList] = None
    TrackingOptions_1: Optional[TrackingOptions] = Field(None, alias='TrackingOptions')
    VdmOptions_1: Optional[VdmOptions] = Field(None, alias='VdmOptions')


class GetContactListResponse(BaseModel):
    ContactListName_1: Optional[ContactListName] = Field(None, alias='ContactListName')
    CreatedTimestamp: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    LastUpdatedTimestamp: Optional[Timestamp] = None
    Tags: Optional[TagList] = None
    Topics_1: Optional[Topics] = Field(None, alias='Topics')


class GetDeliverabilityDashboardOptionsResponse(BaseModel):
    AccountStatus: Optional[DeliverabilityDashboardAccountStatus] = None
    ActiveSubscribedDomains: Optional[DomainDeliverabilityTrackingOptions] = None
    DashboardEnabled: Enabled
    PendingExpirationSubscribedDomains: Optional[
        DomainDeliverabilityTrackingOptions
    ] = None
    SubscriptionExpiryDate: Optional[Timestamp] = None


class GetDeliverabilityTestReportResponse(BaseModel):
    DeliverabilityTestReport_1: DeliverabilityTestReport = Field(
        ..., alias='DeliverabilityTestReport'
    )
    IspPlacements_1: IspPlacements = Field(..., alias='IspPlacements')
    Message: Optional[MessageContent] = None
    OverallPlacement: PlacementStatistics
    Tags: Optional[TagList] = None


class GetDomainStatisticsReportResponse(BaseModel):
    DailyVolumes_1: DailyVolumes = Field(..., alias='DailyVolumes')
    OverallVolume_1: OverallVolume = Field(..., alias='OverallVolume')


class GetEmailIdentityResponse(BaseModel):
    ConfigurationSetName_1: Optional[ConfigurationSetName] = Field(
        None, alias='ConfigurationSetName'
    )
    DkimAttributes_1: Optional[DkimAttributes] = Field(None, alias='DkimAttributes')
    FeedbackForwardingStatus: Optional[Enabled] = None
    IdentityType_1: Optional[IdentityType] = Field(None, alias='IdentityType')
    MailFromAttributes_1: Optional[MailFromAttributes] = Field(
        None, alias='MailFromAttributes'
    )
    Policies: Optional[PolicyMap] = None
    Tags: Optional[TagList] = None
    VerificationStatus_1: Optional[VerificationStatus] = Field(
        None, alias='VerificationStatus'
    )
    VerifiedForSendingStatus: Optional[Enabled] = None


class GetSuppressedDestinationResponse(BaseModel):
    SuppressedDestination_1: SuppressedDestination = Field(
        ..., alias='SuppressedDestination'
    )


class ImportJobSummary(BaseModel):
    CreatedTimestamp: Optional[Timestamp] = None
    FailedRecordsCount_1: Optional[FailedRecordsCount] = Field(
        None, alias='FailedRecordsCount'
    )
    ImportDestination_1: Optional[ImportDestination] = Field(
        None, alias='ImportDestination'
    )
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    ProcessedRecordsCount_1: Optional[ProcessedRecordsCount] = Field(
        None, alias='ProcessedRecordsCount'
    )


class ImportJobSummaryList(RootModel[List[ImportJobSummary]]):
    root: List[ImportJobSummary] = Field(
        ..., description='A list of the import job summaries.'
    )


class ListContactListsResponse(BaseModel):
    ContactLists: Optional[ListOfContactLists] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListContactsFilter(BaseModel):
    FilteredStatus: Optional[SubscriptionStatus] = None
    TopicFilter_1: Optional[TopicFilter] = Field(None, alias='TopicFilter')


class ListContactsRequest(BaseModel):
    Filter: Optional[ListContactsFilter] = None


class ListContactsResponse(BaseModel):
    Contacts: Optional[ListOfContacts] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDedicatedIpPoolsResponse(BaseModel):
    DedicatedIpPools: Optional[ListOfDedicatedIpPools] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListImportJobsResponse(BaseModel):
    ImportJobs: Optional[ImportJobSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListRecommendationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Recommendations: Optional[RecommendationsList] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: TagList


class Message(BaseModel):
    Body_1: Body = Field(..., alias='Body')
    Subject: Content


class PutAccountVdmAttributesRequest(BaseModel):
    VdmAttributes_1: VdmAttributes = Field(..., alias='VdmAttributes')


class PutConfigurationSetVdmOptionsRequest(BaseModel):
    VdmOptions_1: Optional[VdmOptions] = Field(None, alias='VdmOptions')


class PutDeliverabilityDashboardOptionRequest(BaseModel):
    DashboardEnabled: Enabled
    SubscribedDomains: Optional[DomainDeliverabilityTrackingOptions] = None


class SendBulkEmailRequest(BaseModel):
    BulkEmailEntries: BulkEmailEntryList
    ConfigurationSetName_1: Optional[ConfigurationSetName] = Field(
        None, alias='ConfigurationSetName'
    )
    DefaultContent: BulkEmailContent
    DefaultEmailTags: Optional[MessageTagList] = None
    FeedbackForwardingEmailAddress: Optional[EmailAddress] = None
    FeedbackForwardingEmailAddressIdentityArn: Optional[AmazonResourceName] = None
    FromEmailAddress: Optional[EmailAddress] = None
    FromEmailAddressIdentityArn: Optional[AmazonResourceName] = None
    ReplyToAddresses: Optional[EmailAddressList] = None


class SuppressedDestinationSummaries(RootModel[List[SuppressedDestinationSummary]]):
    root: List[SuppressedDestinationSummary]


class UpdateConfigurationSetEventDestinationRequest(BaseModel):
    EventDestination: EventDestinationDefinition


class EventDestination1(BaseModel):
    CloudWatchDestination_1: Optional[CloudWatchDestination] = Field(
        None, alias='CloudWatchDestination'
    )
    Enabled_1: Optional[Enabled] = Field(None, alias='Enabled')
    KinesisFirehoseDestination_1: Optional[KinesisFirehoseDestination] = Field(
        None, alias='KinesisFirehoseDestination'
    )
    MatchingEventTypes: Optional[EventTypes] = None
    PinpointDestination_1: Optional[PinpointDestination] = Field(
        None, alias='PinpointDestination'
    )
    SnsDestination_1: Optional[SnsDestination] = Field(None, alias='SnsDestination')


class V2EmailConfigurationSetsConfigurationSetNameEventDestinationsPostRequest(
    BaseModel
):
    EventDestination: EventDestination1 = Field(
        ...,
        description='An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.',
    )
    EventDestinationName: str = Field(
        ...,
        description='<p>The name of an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>',
    )


class V2EmailConfigurationSetsConfigurationSetNameEventDestinationsEventDestinationNamePutRequest(
    BaseModel
):
    EventDestination: EventDestination1 = Field(
        ...,
        description='An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.',
    )


class V2EmailDeliverabilityDashboardPutRequest(BaseModel):
    DashboardEnabled: bool = Field(
        ...,
        description='Specifies whether to enable the Deliverability dashboard. To enable the dashboard, set this value to <code>true</code>.',
    )
    SubscribedDomains: Optional[List[DomainDeliverabilityTrackingOption]] = Field(
        None,
        description='An object that contains information about the Deliverability dashboard subscription for a verified domain that you use to send email and currently has an active Deliverability dashboard subscription. If a Deliverability dashboard subscription is active for a domain, you gain access to reputation, inbox placement, and other metrics for the domain.',
    )


class Content1(BaseModel):
    Raw: Optional[RawMessage] = None
    Simple: Optional[Message] = None
    Template_1: Optional[Template] = Field(None, alias='Template')


class V2EmailDeliverabilityDashboardTestPostRequest(BaseModel):
    Content: Content1 = Field(
        ...,
        description='An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.',
    )
    FromEmailAddress: str = Field(
        ...,
        description='The email address that the predictive inbox placement test email was sent from.',
    )
    ReportName: Optional[str] = Field(
        None,
        description='A name that helps you identify a report generated by the Deliverability dashboard.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.',
    )


class V2EmailMetricsBatchPostRequest(BaseModel):
    Queries: List[BatchGetMetricDataQuery] = Field(
        ...,
        description='A list of queries for metrics to be retrieved.',
        max_length=10,
        min_length=1,
    )


class V2EmailOutboundBulkEmailsPostRequest(BaseModel):
    BulkEmailEntries: List[BulkEmailEntry] = Field(
        ..., description='A list of <code>BulkEmailEntry</code> objects.'
    )
    ConfigurationSetName: Optional[str] = Field(
        None,
        description='<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )
    DefaultContent_1: DefaultContent = Field(
        ...,
        alias='DefaultContent',
        description='An object that contains the body of the message. You can specify a template message.',
    )
    DefaultEmailTags: Optional[List[MessageTag]] = Field(
        None, description='A list of message tags.'
    )
    FeedbackForwardingEmailAddress: Optional[str] = Field(
        None,
        description='The address that you want bounce and complaint notifications to be sent to.',
    )
    FeedbackForwardingEmailAddressIdentityArn: Optional[str] = Field(
        None,
        description='<p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>FeedbackForwardingEmailAddress</code> parameter.</p> <p>For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the <code>FeedbackForwardingEmailAddressIdentityArn</code> to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the <code>FeedbackForwardingEmailAddress</code> to be feedback@example.com.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>',
    )
    FromEmailAddress: Optional[str] = Field(
        None,
        description='The email address to use as the "From" address for the email. The address that you specify has to be verified.',
    )
    FromEmailAddressIdentityArn: Optional[str] = Field(
        None,
        description='<p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>FromEmailAddress</code> parameter.</p> <p>For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the <code>FromEmailAddressIdentityArn</code> to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the <code>FromEmailAddress</code> to be sender@example.com.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>',
    )
    ReplyToAddresses: Optional[List[EmailAddress]] = Field(
        None,
        description='The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.',
    )


class V2EmailOutboundEmailsPostRequest(BaseModel):
    ConfigurationSetName: Optional[str] = Field(
        None,
        description='<p>The name of a configuration set.</p> <p> <i>Configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>',
    )
    Content: Content1 = Field(
        ...,
        description='An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.',
    )
    Destination_1: Optional[Destination] = Field(
        None,
        alias='Destination',
        description='<p>An object that describes the recipients for an email.</p> <note> <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the <i>local part</i> of a destination email address (the part of the email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII characters</a>. If the <i>domain part</i> of an address (the part after the @ sign) contains non-ASCII characters, they must be encoded using Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p> </note>',
    )
    EmailTags: Optional[List[MessageTag]] = Field(
        None, description='A list of message tags.'
    )
    FeedbackForwardingEmailAddress: Optional[str] = Field(
        None,
        description='The address that you want bounce and complaint notifications to be sent to.',
    )
    FeedbackForwardingEmailAddressIdentityArn: Optional[str] = Field(
        None,
        description='<p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>FeedbackForwardingEmailAddress</code> parameter.</p> <p>For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use feedback@example.com, then you would specify the <code>FeedbackForwardingEmailAddressIdentityArn</code> to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the <code>FeedbackForwardingEmailAddress</code> to be feedback@example.com.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>',
    )
    FromEmailAddress: Optional[str] = Field(
        None,
        description='The email address to use as the "From" address for the email. The address that you specify has to be verified. ',
    )
    FromEmailAddressIdentityArn: Optional[str] = Field(
        None,
        description='<p>This parameter is used only for sending authorization. It is the ARN of the identity that is associated with the sending authorization policy that permits you to use the email address specified in the <code>FromEmailAddress</code> parameter.</p> <p>For example, if the owner of example.com (which has ARN arn:aws:ses:us-east-1:123456789012:identity/example.com) attaches a policy to it that authorizes you to use sender@example.com, then you would specify the <code>FromEmailAddressIdentityArn</code> to be arn:aws:ses:us-east-1:123456789012:identity/example.com, and the <code>FromEmailAddress</code> to be sender@example.com.</p> <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p> <p>For Raw emails, the <code>FromEmailAddressIdentityArn</code> value overrides the X-SES-SOURCE-ARN and X-SES-FROM-ARN headers specified in raw email message content.</p>',
    )
    ListManagementOptions: Optional[ListManagementOptions1] = Field(
        None,
        description='An object used to specify a list or topic to which an email belongs, which will be used when a contact chooses to unsubscribe.',
    )
    ReplyToAddresses: Optional[List[EmailAddress]] = Field(
        None,
        description='The "Reply-to" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply.',
    )


class BatchGetMetricDataQueries(RootModel[List[BatchGetMetricDataQuery]]):
    root: List[BatchGetMetricDataQuery] = Field(..., max_length=10, min_length=1)


class BatchGetMetricDataRequest(BaseModel):
    Queries: BatchGetMetricDataQueries


class CreateConfigurationSetEventDestinationRequest(BaseModel):
    EventDestination: EventDestinationDefinition
    EventDestinationName_1: EventDestinationName = Field(
        ..., alias='EventDestinationName'
    )


class CreateImportJobRequest(BaseModel):
    ImportDataSource_1: ImportDataSource = Field(..., alias='ImportDataSource')
    ImportDestination_1: ImportDestination = Field(..., alias='ImportDestination')


class EmailContent(BaseModel):
    Raw: Optional[RawMessage] = None
    Simple: Optional[Message] = None
    Template_1: Optional[Template] = Field(None, alias='Template')


class GetImportJobResponse(BaseModel):
    CompletedTimestamp: Optional[Timestamp] = None
    CreatedTimestamp: Optional[Timestamp] = None
    FailedRecordsCount_1: Optional[FailedRecordsCount] = Field(
        None, alias='FailedRecordsCount'
    )
    FailureInfo_1: Optional[FailureInfo] = Field(None, alias='FailureInfo')
    ImportDataSource_1: Optional[ImportDataSource] = Field(
        None, alias='ImportDataSource'
    )
    ImportDestination_1: Optional[ImportDestination] = Field(
        None, alias='ImportDestination'
    )
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    ProcessedRecordsCount_1: Optional[ProcessedRecordsCount] = Field(
        None, alias='ProcessedRecordsCount'
    )


class ListSuppressedDestinationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SuppressedDestinationSummaries_1: Optional[SuppressedDestinationSummaries] = Field(
        None, alias='SuppressedDestinationSummaries'
    )


class SendEmailRequest(BaseModel):
    ConfigurationSetName_1: Optional[ConfigurationSetName] = Field(
        None, alias='ConfigurationSetName'
    )
    Content: EmailContent
    Destination_1: Optional[Destination] = Field(None, alias='Destination')
    EmailTags: Optional[MessageTagList] = None
    FeedbackForwardingEmailAddress: Optional[EmailAddress] = None
    FeedbackForwardingEmailAddressIdentityArn: Optional[AmazonResourceName] = None
    FromEmailAddress: Optional[EmailAddress] = None
    FromEmailAddressIdentityArn: Optional[AmazonResourceName] = None
    ListManagementOptions_1: Optional[ListManagementOptions] = Field(
        None, alias='ListManagementOptions'
    )
    ReplyToAddresses: Optional[EmailAddressList] = None


class CreateDeliverabilityTestReportRequest(BaseModel):
    Content: EmailContent
    FromEmailAddress: EmailAddress
    ReportName_1: Optional[ReportName] = Field(None, alias='ReportName')
    Tags: Optional[TagList] = None
